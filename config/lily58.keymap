/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define GAME_LEFT 1
#define GAME_RIGHT 2
#define NUM 3
#define SYM 4
#define NAV 5
#define SYS 6
#define MOUSE 7
#define MOUSESLOW 8

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <180>;
    require-prior-idle-ms = <100>;
};

&sk {
    release-after-ms = <800>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

/ {
    behaviors {
        hl_kr: hold_key_repeat_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&key_repeat>;
        };

        mo_kp: momentary_hold_key_press_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&kp>;
        };

        mo_kp_tap: momentary_hold_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        mo_kr: momentary_hold_key_repeat_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&key_repeat>;
        };

        sk_kp_tap: sticky_key_press_tap_prefer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&sk>, <&kp>;
        };

        ppn: tap_dance_media_play_pause_next {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PP>, <&kp C_NEXT>;
        };

        bt_cl_cla: tap_dance_bt_control {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
        };

        ssh_cw: shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_grave: apos_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp APOS>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot: period_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_hold: dot_dblqt_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&dot>;
        };

        cmma_semi: cmma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cmma_semi_hold: cmma_semi_hold_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&cmma_semi>;
        };

        alt_lbracket: alt_lbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_LBRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_lparen: alt_lparen {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_LPAREN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&alt_lbracket>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_rbracket: alt_rbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_RBRACKET";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_paren: alt_rparen {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_RPAREN";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&alt_rbracket>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f1: alt_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F1";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f2: alt_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f3: alt_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F3";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F4";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f5: alt_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F5";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f6: alt_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F6";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f7: alt_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F7";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f8: alt_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F8";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f9: alt_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F9";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };

        alt_f10: alt_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F10";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp F10>;
            mods = <(MOD_LALT | MOD_RALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /****************************************
        ********** Left Hand Combos  ***********
        ****************************************/

        combo_to_base {
            bindings = <&to BASE>;
            key-positions = <4 5>;
        };

        combo_to_left {
            bindings = <&to GAME_LEFT>;
            key-positions = <2 3>;
        };

        combo_ctrl_b {
            timeout-ms = <40>;
            key-positions = <11 12>;
            bindings = <&kp LC(B)>;
        };

        combo_save {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&kp LC(S)>;
        };

        combo_copy_yank {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LC(C)>;
        };

        combo_paste {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LC(V)>;
        };

        combo_app_switcher {
            timeout-ms = <40>;
            key-positions = <21 22 23>;
            bindings = <&kp LA(TAB)>;
        };

        combo_ctrl_tab {
            timeout-ms = <40>;
            key-positions = <2 13>;
            bindings = <&kp LC(TAB)>;
        };

        combo_ctrl_shift_tab {
            timeout-ms = <40>;
            key-positions = <2 11>;
            bindings = <&kp LC(LS(TAB))>;
        };

        combo_swap_tab_down {
            timeout-ms = <40>;
            key-positions = <12 3>;
            bindings = <&kp LC(LS(PAGE_DOWN))>;
        };

        combo_swap_tab_up {
            timeout-ms = <40>;
            key-positions = <1 12>;
            bindings = <&kp LC(LS(PAGE_UP))>;
        };

        combo_back_hist {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&kp LG(LBKT)>;
        };

        combo_forward_history {
            timeout-ms = <40>;
            key-positions = <2 3>;
            bindings = <&kp LG(RBKT)>;
        };

        combo_space {
            timeout-ms = <40>;
            key-positions = <11 13>;
            bindings = <&kp SPACE>;
        };

        /****************************************
        ********** Right Hand Combos  ***********
        ****************************************/

        combo_esc {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
            layers = <0 1 2 3>;
        };

        combo_return {
            timeout-ms = <40>;
            key-positions = <17 18>;
            bindings = <&kp RETURN>;
            layers = <0 1 2 3>;
        };

        combo_del {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&kp DEL>;
        };

        combo_tab {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp TAB>;
        };

        combo_bol {
            timeout-ms = <40>;
            key-positions = <6 7>;
            bindings = <&kp LG(LEFT)>;
        };

        combo_eol {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&kp LG(RIGHT)>;
        };

        combo_word_left {
            timeout-ms = <40>;
            key-positions = <7 16>;
            bindings = <&kp LA(LEFT)>;
            layers = <0 1 2 3>;
        };

        combo_word_right {
            timeout-ms = <40>;
            key-positions = <7 18>;
            bindings = <&kp LA(RIGHT)>;
            layers = <0 1 2 3>;
        };

        combo_bt_previous {
            bindings = <&bt BT_PRV>;
            key-positions = <6 7>;
        };

        combo_bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <8 9>;
        };

        combo_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <10 11>;
        };

        /****************************
        ******    Code Combos   *****
        ******  Right Hand Vim  *****
        *****************************/

        combo_focus_left {
            timeout-ms = <35>;
            key-positions = <17 26>;
            bindings = <&kp LC(H)>;
        };

        combo_focus_down {
            timeout-ms = <35>;
            key-positions = <16 27>;
            bindings = <&kp LC(J)>;
        };

        combo_focus_up {
            timeout-ms = <50>;
            key-positions = <18 27>;
            bindings = <&kp LC(K)>;
        };

        combo_focus_right {
            timeout-ms = <50>;
            key-positions = <17 28>;
            bindings = <&kp LC(L)>;
        };

        /****************************************
        ********** Both Hand Combos  ***********
        ****************************************/

        combo_caps_word {
            timeout-ms = <55>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* 0 */
        base {
            display-name = "base";
            bindings = <
                &none  &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none  &none

                &none  &kp Q  &kp W  &kp F  &kp P  &kp B
                &kp J  &kp L  &kp U  &kp Y  &apos_grave  &none

                &none  &mt LC(LA(LSHIFT)) A  &mo_kp_tap MOUSE R  &mo_kp_tap NAV S  &mo_kp_tap NUM T  &kp G
                &kp M  &kp N  &kp E  &mo_kp_tap SYS I  &mt LC(LA(LSHIFT)) O  &none

                &none  &kp Z  &mt LALT X  &mt LCMD C  &mt LCMD D  &kp V  &none
                &none  &kp K  &mt LCMD H  &cmma_semi_hold LCMD 0  &dot_hold LALT 0  &kp SLASH  &none

                &none &none &sk LSFT &mo_kp SYM BSPC
                &sk_kp_tap LCTRL SPACE &key_repeat &none &none
            >;
        };

        /* 1 */
        game_left {
            display-name = "L";
            bindings = <
                &kp EQUAL  &alt_f1  &alt_f2  &alt_f3  &alt_f4  &alt_f5
                &none  &none  &none  &none  &none  &none

                &sl SYM  &kp Q  &kp W  &kp F  &kp P  &kp B
                &none  &none  &none  &none  &none  &none

                &sl GAME_RIGHT  &kp A   &kp R   &kp S  &kp T  &kp G
                &none  &none  &none  &none  &none  &none

                &sl NUM  &kp Z  &kp X  &kp C  &kp D  &kp V  &kp BACKSPACE
                &none  &none  &none  &none  &none  &none  &none

                &mt LEFT_CONTROL ESCAPE  &mt LEFT_ALT SPACE  &mt LEFT_SHIFT TAB  &mt LEFT_GUI ENTER
                &none  &none  &none  &none
            >;
        };

        /* 2 */
        game_right {
            display-name = "R";
            bindings = <
                &kp MINUS  &alt_f6  &alt_f7  &alt_f8  &alt_f9  &alt_f10
                &none  &none  &none  &none  &none  &none

                &trans  &kp J  &kp L  &kp U  &kp Y  &apos_grave
                &none  &none  &none  &none  &none  &none

                &trans  &kp M  &kp N  &kp E  &kp I  &kp O
                &none  &none  &none  &none  &none  &none

                &trans  &kp K  &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp DEL
                &none  &none  &none  &none  &none  &none  &none

                &trans  &trans  &trans  &trans
                &none  &none  &none  &none
            >;
        };

        /* 3 */
        numbers {
            display-name = "num";
            bindings = <
                &none  &none  &none  &none  &none  &none
                &none  &none  &none  &none  &none  &none

                &none  &alt_f7  &alt_f8  &alt_f9  &none  &none
                &none  &none  &none  &none  &none  &none

                &kp MINUS  &alt_f4  &alt_f5  &alt_f6  &kp NUM_0  &none
                &none  &none  &none  &none  &none  &none  &none

                &none  &kp DOT  &alt_f1  &alt_f2  &alt_f3  &kp SLASH  &none
                &none  &none  &sk LCMD  &sk LALT  &trans  &none

                &none  &none  &trans  &trans
                &trans  &trans  &none  &none
            >;
        };

        /* 4 */
        symbol {
            display-name = "sym";
            bindings = <
                &none  &none  &kp EXCL  &kp LBRC  &kp RBRC  &none
                &none  &kp PERCENT  &kp PLUS  &kp EQUAL  &none  &none

                &none  &kp AT  &kp AMPS  &kp LPAR  &kp RPAR  &kp TILDE
                &kp CARET  &kp STAR  &kp HASH  &kp DOLLAR  &kp MINUS  &none

                &none  &kp SEMICOLON  &mt LALT UNDER  &mt LCMD LBKT  &mt LCMD RBKT  &kp PIPE  &none
                &none  &kp BACKSLASH  &mt LCMD LT  &mt LCMD GT  &mt LALT DQT  &kp COLON  &none

                &none  &none  &trans  &trans
                &trans  &trans  &none  &none
            >;
        };

        /* 5 */
        navigation {
            display-name = "nav";
            bindings = <
            &none  &none  &kp INSERT  &none  &none  &none
            &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END  &none  &none

            &none  &none  &mt LALT RETURN  &trans  &mt LCMD TAB  &none
            &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none  &none

            &none  &none  &kp ESC  &none  &kp DEL  &none  &none
            &none  &none  &none  &none  &none  &none  &none

            &none  &none  &trans  &trans
            &trans  &trans  &none  &none
            >;
        };

        /* 6 */
        system {
            display-name = "sys";
            bindings = <
            &none  &none  &bt_cl_cla  &ext_power EP_OFF  &out OUT_TOG  &none
            &none  &none  &none  &none  &none  &none

            &none  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
            &none  &kp C_BRIGHTNESS_INC  &kp C_VOL_UP  &trans  &none  &none

            &none  &none  &none  &none  &none  &none &none
            &none  &none  &kp C_BRIGHTNESS_DEC  &kp C_VOL_DN  &none  &none  &none

            &none  &none  &none  &none
            &kp C_PP  &kp C_NEXT  &none  &none
            >;
        };

        /* 7 */
        mouse {
            display-name = "mouse";
            bindings = <
                &none  &none  &none  &none  &mt PRINTSCREEN LS(PRINTSCREEN)  &none
                &mkp MB4  &none  &none  &mkp MB5  &none  &none

                &none  &sk LALT  &trans  &sk LCMD  &sk LCTRL  &none
                &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp MB3  &none

                &none  &none  &none  &none  &none  &none  &none
                &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none  &none

                &none  &none  &trans  &mo MOUSESLOW
                &mkp MB1  &mkp MB2  &none  &none
            >;
        };

        /* 8 */
        mouse_slow {
            display-name = "slow";
            bindings = <
                &none  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &none

                &trans  &trans  &trans  &trans  &trans
                &mmv MOVE_X(-900)  &mmv MOVE_Y(900)  &mmv MOVE_Y(-900)  &mmv MOVE_X(900)  &trans

                &none  &trans  &trans  &trans  &trans  &trans  &none
                &none  &trans  &trans  &trans  &trans  &trans  &none

                &none  &none  &trans  &trans
                &trans  &trans  &none  &none
            >;
        };
    };
};
