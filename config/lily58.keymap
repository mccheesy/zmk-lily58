/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#include "behaviors/alt_fn_morph.dtsi"

#define BASE 0
#define GAME 1
#define NAV  2
#define NUM  3
#define SYM  4
#define MSE  5
#define APP  6

#define XXX &none
#define ___ &trans

#define ALT_TAB &tt APP LA(TAB)
#define AS(keycode) &as LS(keycode) keycode

#define B_LT0 XXX
#define B_LT1 &mt LGUI ESC
#define B_LT2 &lt NAV SPACE
#define B_LT3 &mt LSHFT TAB
#define B_RT3 &mt LCTL RET
#define B_RT2 &lt NUM BSPC
#define B_RT1 &mt DEL
#define B_RT0 XXX

#define B_ENC0 ALT_TAB
#define B_ENC1 &kp LG(SPACE)

#define B_SQT  &as DQT SQT
#define B_CMMA &as SEMI COMMA
#define B_DOT  &as COLON DOT

#define G_LT0 &mt LGUI RET
#define G_LT1 &mt LCTL ESC
#define G_LT2 &mt LALT SPACE
#define G_LT3 &mt LSHFT TAB
#define G_RT3 &mt LSHFT RET
#define G_RT2 &mt LALT BSPC
#define G_RT1 &mt LCTL DEL
#define G_RT0 &mt LGUI ESC

#define G_ENC0 ALT_TAB
#define G_ENC1 &kp LG(SPACE)

#define N_PLUS   &mt EQUAL PLUS
#define N_DLLR   &mt LSHFT DLLR
#define N_PRCNT  &mt LCTL PRCNT
#define N_CARET  &mt LALT CARET
#define N_COLON  &mt LGUI COLON

#define N_LPAR   &as LT LPAR
#define N_RPAR   &as GT RPAR
#define N_UNDER  &as EXCL UNDER

#define QUICK_TAP_MS    150
#define TAPPING_TERM_MS 200

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&sl>, <&kp>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&sk>, <&kp>;
};

&sk {
    release-after-ms = <1000>;
};

&sl {
    release-after-ms = <1000>;
};

/ {
    behaviors {
        hm: home_row_mod {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&sk>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            display-name = "Home Row Mod";
        };

        as: autoshift {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            display-name = "Autoshift";
        };

        cwh: caps_word_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&caps_word>;
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            flavor = "balanced";
            display-name = "Caps Word-Hold";
        };

        st: sticky_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&sl>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            flavor = "tap-preferred";
            display-name = "Sticky Layer-Tap";
        };

        tt: to_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&to>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            flavor = "tap-preferred";
            display-name = "To Layer-Tap";
        };

        wm: wndw_mgmt {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <13 26 27 28 29 30 31 32 33 45 52 53 54 55>;
            // 13 = Q
            // 26 27 28 29 = left-hand arrows
            // 30 31 32 33 = right-hand arrows
            // 45 = H
            // 52 53 = left-hand thumbs
            // 54 55 = right-hand thumbs
            display-name = "Window-Manager";
        };

        alt_f1: alt_f1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as EXCL N1>, <&kp F1>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f2: alt_f2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as AT N2>, <&kp F2>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f3: alt_f3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as HASH N3>, <&kp F3>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as DLLR N4>, <&kp F4>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f5: alt_f5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as PRCNT N5>, <&kp F5>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f6: alt_f6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as CARET N6>, <&kp F6>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f7: alt_f7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as AMPS N7>, <&kp F7>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f8: alt_f8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as STAR N8>, <&kp F8>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f9: alt_f9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as LPAR N9>, <&kp F9>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f10: alt_f10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as TILDE GRAVE>, <&kp F10>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f11: alt_f11 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as COLON SEMI>, <&kp F11>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f12: alt_f12 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as LBRC LBKT>, <&kp F12>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f13: alt_f13 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as FSLH BSLH>, <&kp F13>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f14: alt_f14 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as STAR EQUAL>, <&kp F14>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f15: alt_f15 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&as RBRC RBKT>, <&kp F15>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        wm_combo {
            bindings = <&tt APP LA(TAB)>;
            key-positions = <15 16>;  // FP
        };

        lalt {
            bindings = <&sk LALT>;
            key-positions = <26 27>; // RS
        };

        lgui {
            bindings = <&sk LGUI>;
            key-positions = <26 27 28>; // RST
        };

        lctl {
            bindings = <&sk LCTL>;
            key-positions = <27 28>;  // ST
        };

        rctl {
            bindings = <&sk LCTL>;
            key-positions = <31 32>;  // NE
        };

        rgui {
            bindings = <&sk LGUI>;
            key-positions = <31 32 33>;  // NEI
        };

        ralt {
            bindings = <&sk LALT>;
            key-positions = <32 33>;  // IO
        };

        c_pscrn {
            bindings = <&kp LC(PSCRN)>;
            key-positions = <19 20>;  // LU
        };

        g_pscrn {
            bindings = <&kp LG(PSCRN)>;
            key-positions = <19 20 21>;  // LUY
        };

        pscrn {
            bindings = <&kp PSCRN>;
            key-positions = <20 21>;  // UY
        };

        to_mse {
            bindings = <&to MSE>;
            key-positions = <41 44>;  // VK
            layers = <0>;
        };

        to_base {
            bindings = <&to BASE>;
            key-positions = <42 43>;  // ENC1 ENC2
            layers = <1>;
        };

        to_game {
            bindings = <&to GAME>;
            key-positions = <43 42>;  // ENC1 ENC2
            layers = <0>;
        };

        bt_prv {
            bindings = <&bt BT_PRV>;
            key-positions = <56 55>;  // RT2 RT3
        };

        bt_nxt {
            bindings = <&bt BT_NXT>;
            key-positions = <56 57>;  // RT3 RT4
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <57 56 55>; // RT2 RT3 RT4
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
XXX  XXX    XXX    XXX    XXX    XXX                    XXX    XXX    XXX     XXX    XXX       XXX
XXX  AS(Q)  AS(W)  AS(F)  AS(P)  AS(B)                  AS(J)  AS(L)  AS(U)   AS(Y)  B_SQT     XXX
XXX  AS(A)  AS(R)  AS(S)  AS(T)  AS(G)                  AS(M)  AS(N)  AS(E)   AS(I)  AS(O)     XXX
XXX  AS(Z)  AS(X)  AS(C)  AS(D)  AS(V)  B_ENC0  B_ENC1  AS(K)  AS(H)  B_CMMA  B_DOT  AS(FSLH)  XXX
                   B_LT0  B_LT1  B_LT2  B_LT3   B_RT3   B_RT2  B_RT1  B_RT0
            >;
        };

        game {
            display-name = "game";
            bindings = <
&kp EQUAL  &alt_f1  &alt_f2  &alt_f3  &alt_f4  &alt_f5                  &alt_f6  &alt_f7  &alt_f8    &alt_f9  &alt_f10  &kp MINUS
&kp GRAVE  &kp Q    &kp W    &kp F    &kp P    &kp B                    &kp J    &kp L    &kp U      &kp Y    &kp APOS  &kp SEMI
&sl SYM    &kp A    &kp R    &kp S    &kp T    &kp G                    &kp M    &kp N    &kp E      &kp I    &kp O     &sl SYM
&sl NUM    &kp Z    &kp X    &kp C    &kp D    &kp V    G_ENC0  G_ENC1  &kp K    &kp H    &kp COMMA  &kp DOT  &kp FSLH  &sl NUM
                             G_LT0    G_LT1    G_LT2    B_LT3   B_RT3   B_RT2    B_RT1    B_RT0
            >;
        };

        nav {
            display-name = "nav";
            bindings = <
___  ___        ___        ___        ___        ___                      ___           ___           ___         ___            ___           ___
___  &kp LC(Q)  &kp LC(W)  &kp LC(F)  &kp LC(P)  &kp LC(B)                &kp HOME      &kp PG_DN     &kp PG_UP   &kp END        &to MSE       ___
___  &sk LGUI   &sk LALT   &sk LCTRL  &sk LSHFT  &kp LC(LS(G))            &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &kp LC(PG_UP) ___
___  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))  ___  ___  &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp LC(PG_DN) ___
                           ___        ___        ___            ___  ___  ___           ___           ___
            >;
        };

        num {
            display-name = "num";
            bindings = <
___  ___        ___      ___      ___       ___                             ___        ___        ___       ___      ___        ___
___  &alt_f12   &alt_f7  &alt_f8  &alt_f9   &alt_f15                        &kp LBRC   &kp AMPS   &kp HASH  &kp AT   &kp RBRC   ___
___  &alt_f11   &alt_f4  &alt_f5  &alt_f6   &alt_f14                        N_PLUS     N_CARET    N_PRCNT   N_DLLR   N_COLON    ___
___  &alt_f10   &alt_f1  &alt_f2  &alt_f3   &alt_f13  ___        ___        &kp PIPE   &kp UNDER  N_LPAR    N_RPAR   &kp TILDE  ___
                         ___      N_UNDER   AS(N0)    AS(MINUS)  &kp UNDER  ___        ___        ___
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
___  ___            ___       ___        ___        ___                       ___          ___            ___            ___            ___            ___
___  &as LBKT LBRC  &kp AMPS  &kp LT     &kp GT     &as RBKT RBRC             &kp PSCRN    &kp LS(PSCRN)  &kp LC(PSCRN)  &kp LA(PSCRN)  &kp LG(PSCRN)  ___
___  &kp COLON      &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS                  &cwh CAPS 0  &sk LSHFT      &sk LCTRL      &sk LALT       &sk LGUI       ___
___  &kp TILDE      &kp STAR  &kp AT     &kp HASH   &kp PIPE  ___        ___  XXX          XXX            XXX            XXX            XXX            ___
                              ___        &kp LPAR   &kp RPAR  &kp UNDER  ___  ___          ___            XXX
            >;
        };

        mse {
            display-name = "mse";
            bindings = <
___  ___            ___            ___            ___            ___                           ___             ___             ___           ___              ___                    ___
___  &kp LC(Q)      &kp LC(W)      &kp LC(F)      &kp LC(P)      &kp LC(B)                     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &to BASE               ___
___  &sk LGUI       &sk LALT       &sk LCTRL      &sk LSHFT      &kp LC(LS(G))                 &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mt LA(TAB) LA(SPACE)  ___
___  &kp LC(Z)      &kp LC(X)      &kp LC(C)      &kp LC(V)      &kp LC(LS(Z))  ___       ___  &kp LC(LS(Z))   &kp LC(V)       &kp LC(C)     &kp LC(X)        &kp LC(Z)              ___
                                   &mkp MB5       &mkp MB4       &mkp MB1  &mkp MB2  &mkp MB2  &mkp MB1        &mkp MB4        &mkp MB5
            >;
        };

        app {
            display-name = "app";
            bindings = <
___  ___  ___       ___       ___       ___                                  ___       ___       ___     ___        ___  ___
___  ___  ___       ___       ___       ___                                  ___       ___       ___     ___        ___  ___
___  ___  &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT                            &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  ___  ___
___  ___  ___       ___       ___       ___        ___          ___          ___       ___       ___     ___        ___  ___
                    ___       &to BASE  &wm        &kp LS(TAB)  &kp LS(TAB)  &wm       &to BASE  ___
            >;
        };
    };
};
