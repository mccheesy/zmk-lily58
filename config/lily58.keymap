/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        ctrl_lbracket: ctrl_lbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "CRTL_LBRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        sft_lparen: shift_lparen {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_LPAREN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&ctrl_lbracket>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ctrl_rbracket: ctrl_rbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "CRTL_RBRACKET";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        sft_rparen: shift_rparen {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_RPAREN";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&ctrl_rbracket>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_f1: alt_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F1";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f2: alt_f2 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f3: alt_f3 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F3";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F4";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f5: alt_f5 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F5";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f6: alt_f6 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F6";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f7: alt_f7 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F7";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f8: alt_f8 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F8";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f9: alt_f9 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F9";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f10: alt_f10 {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_F10";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp F10>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        caps_word_tap: caps_word_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_TAP";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        c_to_base {
            bindings = <&to 0>;
            key-positions = <0 1>;
            layers = <1>;
        };

        c_to_game {
            bindings = <&to 1>;
            key-positions = <2 3>;
            layers = <0>;
        };

        c_bt_previous {
            bindings = <&bt BT_PRV>;
            key-positions = <6 7>;
        };

        c_bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <8 9>;
        };

        c_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <10 11>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <48 49>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&kp EQUAL  &alt_f1     &alt_f2     &alt_f3      &alt_f4      &alt_f5                                  &alt_f6          &alt_f7      &alt_f8      &alt_f9     &alt_f10        &kp MINUS
&kp GRAVE  &kp Q       &kp W       &kp F        &kp P        &kp B                                    &kp J            &kp L        &kp U        &kp Y       &kp APOSTROPHE  &kp SEMI
&sk LCTRL  &mt LGUI A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &kp G                                    &kp M            &mt RSHFT N  &mt RCTRL E  &mt RALT I  &mt RGUI O      &sk RCTRL
&sk LSHFT  &kp Z       &kp X       &kp C        &kp D        &kp V        &sft_lparen    &sft_rparen  &kp K            &kp H        &kp COMMA    &kp DOT     &kp SEMI        &sk RSHFT
                                   &none        &kp ESCAPE   &lt 2 SPACE  &lt 3 TAB      &lt 3 ENTER  &lt 2 BACKSPACE  &kp DELETE   &none
            >;
        };

        game {
            display-name = "game";
            bindings = <
&kp EQUAL  &alt_f1  &alt_f2  &alt_f3         &alt_f4           &alt_f5                                           &alt_f6             &alt_f7           &alt_f8           &alt_f9  &alt_f10  &kp MINUS
&kp GRAVE  &kp Q    &kp W    &kp F           &kp P             &kp B                                             &kp J               &kp L             &kp U             &kp Y    &kp APOS  &kp SEMI
&sl 2      &kp A    &kp R    &kp S           &kp T             &kp G                                             &kp M               &kp N             &kp E             &kp I    &kp O     &sl 2
&sl 3      &kp Z    &kp X    &kp C           &kp D             &kp V           &kp BACKSPACE    &kp DELETE       &kp K               &kp H             &kp COMMA         &kp DOT  &kp FSLH  &sl 3
                             &mt LGUI ENTER  &mt LCTRL ESCAPE  &mt LALT SPACE  &mt LSHFT TAB    &mt RSHFT ENTER  &mt RALT BACKSPACE  &mt RCTRL DELETE  &mt RGUI RA(TAB)
            >;

            label = "game";
        };

        num {
            display-name = "num";
            bindings = <
&trans  &trans         &trans             &trans        &trans        &trans                                    &trans           &trans            &trans       &trans     &trans                 &trans
&trans  &kp PIPE       &kp N7             &kp N8        &kp N9        &kp SLASH                                 &kp HOME         &kp PAGE_DOWN     &kp PAGE_UP  &kp END    &kp F12                &trans
&trans  &mt LGUI SEMI  &mt LALT NUMBER_4  &mt LCTRL N5  &mt LSHFT N6  &kp EQUAL                                 &kp LEFT         &kp DOWN          &kp UP       &kp RIGHT  &caps_word_tap CAPS 0  &trans
&trans  &kp GRAVE      &kp N1             &kp N2        &kp N3        &kp PLUS   &trans       &trans            &kp LS(LC(Z))    &kp LC(V)         &kp LC(C)    &kp LC(X)  &kp LC(Z)              &trans
                                          &none         &kp PERIOD    &lt 2 N0   &kp MINUS    &mt RCTRL RG(UP)  &lt 2 RG(SPACE)  &mt RGUI RA(TAB)  &none
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
&trans  &trans         &trans           &trans            &trans            &trans                                                &trans               &trans             &trans        &trans           &trans         &trans
&trans  &kp LS(LBKT)   &kp LS(N7)       &kp LS(N8)        &kp LS(N9)        &kp LS(RBKT)                                          &msc SCRL_LEFT       &msc SCRL_DOWN     &msc SCRL_UP  &msc SCRL_RIGHT  &kp RG(PSCRN)  &trans
&trans  &mt LGUI LBKT  &mt LALT LS(N4)  &mt LCTRL LS(N5)  &mt LSHFT LS(N6)  &mt LS(LC(LALT)) RBKT                                 &mmv MOVE_LEFT       &mmv MOVE_DOWN     &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp PSCRN      &trans
&trans  &kp LS(N9)     &kp LS(N1)       &kp LS(N2)        &kp LS(N3)        &kp LS(N0)             &trans         &trans          &mkp MB1             &mkp MB2           &mkp MB3      &mkp MB4         &mkp MB5       &trans
                                        &none             &mt LALT LPAR     &mt LCTRL RPAR         &lt 3 UNDER    &lt 3 RG(LEFT)  &mt RCTRL RG(RIGHT)  &mt RALT RG(DOWN)  &none
            >;
        };
    };
};
