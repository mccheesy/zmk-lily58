/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MEH LC(LS(LALT))

&lt {
    quick-tap-ms = <150>;
    bindings = <&sl>, <&kp>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {
    behaviors {
        cwh: caps_word_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
        };

        alt_f1: alt_f1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f2: alt_f2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f3: alt_f3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f5: alt_f5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f6: alt_f6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f7: alt_f7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f8: alt_f8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f9: alt_f9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f10: alt_f10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp F10>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        as: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        hyp_mml: hyp_mml {
            compatible = "zmk,behavior-mod-morph";
            label = "HYP_MML";
            bindings = <&kp LEFT>, <&mmv MOVE_LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        hyp_mmd: hyp_mmd {
            compatible = "zmk,behavior-mod-morph";
            label = "HYP_MMD";
            bindings = <&kp DOWN>, <&mmv MOVE_DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };

        hyp_mmu: hyp_mmu {
            compatible = "zmk,behavior-mod-morph";
            label = "HYP_MMU";
            bindings = <&kp UP>, <&mmv MOVE_UP>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI)>;
        };

        hyp_mmr: hyp_mmr {
            compatible = "zmk,behavior-mod-morph";
            label = "HYP_MMR";
            bindings = <&kp RIGHT>, <&mmv MOVE_RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LGUI|MOD_LALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        c_to_base {
            bindings = <&to 0>;
            key-positions = <42 43>;
            layers = <1>;
        };

        c_to_game {
            bindings = <&to 1>;
            key-positions = <43 42>;
            layers = <0>;
        };

        c_bt_previous {
            bindings = <&bt BT_PRV>;
            key-positions = <56 55>;
        };

        c_bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <56 57>;
        };

        c_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <57 56 55>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <28 27>;
        };

        esc {
            bindings = <&sl 2>;
            key-positions = <28 27 26>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <26 27>;
        };

        spc {
            bindings = <&kp SPACE>;
            key-positions = <32 31>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <31 32 33>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&none  &none        &none        &none        &none        &none                                    &none        &none        &none            &none         &none           &none
&none  &as LS(Q) Q  &as LS(W) W  &as LS(F) F  &as LS(P) P  &as LS(B) B                              &as LS(J) J  &as LS(L) L  &as LS(U) U      &as LS(Y) Y   &as DQT SQT     &none
&none  &as LS(A) A  &as LS(R) R  &as LS(S) S  &as LS(T) T  &as LS(G) G                              &as LS(M) M  &as LS(N) N  &as LS(E) E      &as LS(I) I   &as LS(O) O     &none
&none  &as LS(Z) Z  &as LS(X) X  &as LS(C) C  &as LS(D) D  &as LS(V) V  &kp ESC          &kp DEL    &as LS(K) K  &as LS(H) H  &mt QMARK COMMA  &mt EXCL DOT  &mt SEMI COLON  &none
                                 &none        &none        &lt 2 SPACE  &mt LSHFT TAB    &lt 4 RET  &lt 3 BSPC   &none        &none
            >;
        };

        game {
            display-name = "game";
            bindings = <
&kp EQUAL  &alt_f1  &alt_f2  &alt_f3       &alt_f4        &alt_f5                                         &alt_f6        &alt_f7        &alt_f8           &alt_f9  &alt_f10  &kp MINUS
&kp GRAVE  &kp Q    &kp W    &kp F         &kp P          &kp B                                           &kp J          &kp L          &kp U             &kp Y    &kp APOS  &kp SEMI
&sl 4      &kp A    &kp R    &kp S         &kp T          &kp G                                           &kp M          &kp N          &kp E             &kp I    &kp O     &none
&sl 3      &kp Z    &kp X    &kp C         &kp D          &kp V           &kp BSPC         &none          &kp K          &kp H          &kp COMMA         &kp DOT  &kp FSLH  &sl 2
                             &mt LGUI RET  &mt LCTRL ESC  &mt LALT SPACE  &mt LSHFT TAB    &mt LSHFT RET  &mt RALT BSPC  &mt RCTRL DEL  &mt RGUI RA(TAB)
            >;
        };

        nav {
            bindings = <
&none  &none          &none          &none          &none          &none                                     &none          &none      &none      &none      &none        &none
&none  &kp LG(PG_DN)  &kp LC(PG_DN)  &kp LC(PG_UP)  &kp LG(PG_UP)  &msc SCRL_UP                              &kp HOME       &kp PG_DN  &kp PG_UP  &kp END    &cwh CAPS 0  &none
&none  &sk LGUI       &sk LALT       &sk LCTRL      &sk LSHFT      &msc SCRL_DOWN                            &kp LEFT       &kp DOWN   &kp UP     &kp RIGHT  &kp LA(TAB)  &none
&none  &kp LC(Z)      &kp LC(X)      &kp LC(C)      &kp LC(V)      &kp LC(LS(Z))   &kp LG(SPACE)    &kp DEL  &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)    &none
                                     &none          &none          &trans          &trans           &kp RET  &kp BSPC       &none      &none
            >;

            label = "nav";
        };

        num {
            display-name = "num";
            bindings = <
&none  &none          &none   &none   &none   &none                                  &none    &none      &none      &none     &none     &none
&none  &as LBRC LBKT  &kp N7  &kp N8  &kp N9  &as RBRC RBKT                          &kp F1   &kp F2     &kp F3     &kp F4    &kp F5    &none
&none  &kp PLUS       &kp N4  &kp N5  &kp N6  &kp EQUAL                              &kp F12  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &none
&none  &kp STAR       &kp N1  &kp N2  &kp N3  &kp BSLH       &kp LA(TAB)    &kp F11  &kp F6   &kp F7     &kp F8     &kp F9    &kp F10   &none
                              &none   &none   &kp N0         &kp MINUS      &trans   &trans   &none      &none
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
&none  &none          &none      &none      &none      &none                                            &none      &none          &none          &none          &none          &none
&none  &mt LBKT LBRC  &kp AMPS   &kp HASH   &kp PRCNT  &mt RBKT RBRC                                    &kp PSCRN  &kp LS(PSCRN)  &kp LC(PSCRN)  &kp LA(PSCRN)  &kp LG(PSCRN)  &none
&none  &kp TILDE      &kp CARET  &kp UNDER  &kp DLLR   &kp FSLH                                         &none      &sk LSHFT      &sk LCTRL      &sk LALT       &sk LGUI       &none
&none  &kp GRAVE      &kp AT     &kp LT     &kp GT     &kp PIPE       &kp LS(LA(TAB))    &kp LG(SPACE)  &none      &none          &none          &none          &none          &none
                                 &none      &none      &kp LPAR       &kp RPAR           &kp RET        &kp BSPC   &none          &none
            >;

            label = "fun";
        };

        mse {
            label = "mse";
            bindings = <
&none  &none          &none          &none          &none          &none                              &none           &none           &none         &none            &none          &none
&none  &kp LG(PG_DN)  &kp LC(PG_DN)  &kp LC(PG_UP)  &kp LG(PG_UP)  &to 2                              &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_DOWN   &cwh CAPS 0    &none
&none  &sk LGUI       &sk LALT       &sk LCTRL      &sk LSHFT      &to 0                              &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp LA(SPACE)  &none
&none  &none          &none          &mkp MB3       &mkp MB4       &mkp MB5  &kp LA(TAB)    &kp DEL   &kp LC(LS(Z))   &kp LC(V)       &kp LC(C)     &kp LC(X)        &kp LC(Z)      &none
                                     &none          &none          &mkp MB1  &mkp MB2       &mkp MB2  &mkp MB1        &none           &none
            >;
        };
    };
};
