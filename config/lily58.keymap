/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MEH LC(LS(LALT))

&lt {
    quick-tap-ms = <150>;
    bindings = <&sl>, <&kp>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <
                                       6  7  8  9 10 11
                                      18 19 20 21 22 23
                                      30 31 32 33 34 35
                                      43 44 45 46 47 48 49
                        50 51 52 53    54 55 56 57
            >;

            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <
                 0  1  2  3  4  5
                12 13 14 15 16 17
                24 25 26 27 28 29
                36 37 38 39 40 41 42
                        50 51 52 53    54 55 56 57
            >;

            hold-trigger-on-release;
        };

        cln_semi: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cwh: caps_word_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
        };

        lbkt: ctrl_lbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        lprn: shift_lparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&lbkt>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbkt: ctrl_rbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        rprn: shift_rparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&rbkt>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_f1: alt_f1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f2: alt_f2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f3: alt_f3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f5: alt_f5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f6: alt_f6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f7: alt_f7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f8: alt_f8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f9: alt_f9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f10: alt_f10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp F10>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            bindings = <&kp BSPC>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hold_sl_shft_del: hold_sl_shft_del {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_SL_SHFT_DEL";
            bindings = <&sl>, <&bspc_del>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
        };

        comma_qmark: comma_qmark {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QMARK";
            bindings = <&kp COMMA>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_excl: dot_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_EXCL";
            bindings = <&kp DOT>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        as: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "balanced";
        };

        cwt: caps_word_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CWT";
            bindings = <&caps_word>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        c_to_base {
            bindings = <&to 0>;
            key-positions = <42 43>;
            layers = <1>;
        };

        c_to_game {
            bindings = <&to 1>;
            key-positions = <43 42>;
            layers = <0>;
        };

        c_bt_previous {
            bindings = <&bt BT_PRV>;
            key-positions = <56 55>;
        };

        c_bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <56 57>;
        };

        c_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <57 56 55>;
        };

        fun_layer {
            bindings = <&mo 2>;
            key-positions = <52 55>;
        };

        fun_layer_l {
            bindings = <&sl 2>;
            key-positions = <28 27 26>;
        };

        fun_layer_r {
            bindings = <&sl 2>;
            key-positions = <31 32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&none  &none        &none        &none        &none        &none                                   &none        &none        &none            &none         &none           &none
&none  &none        &as LS(W) W  &as LS(F) F  &as LS(P) P  &as LS(B) B                             &as LS(J) J  &as LS(L) L  &as LS(U) U      &as LS(Y) Y   &none           &none
&none  &as LS(A) A  &as LS(R) R  &as LS(S) S  &as LS(T) T  &as LS(G) G                             &as LS(M) M  &as LS(N) N  &as LS(E) E      &as LS(I) I   &as LS(O) O     &none
&none  &as LS(Z) Z  &as LS(X) X  &as LS(C) C  &as LS(D) D  &as LS(V) V   &as LS(Q) Q    &bspc_del  &as LS(K) K  &as LS(H) H  &mt QMARK COMMA  &mt EXCL DOT  &mt SEMI COLON  &none
                                 &none        &none        &cwt 0 SPACE  &sk LCTRL      &sk LALT   &sl 3        &none        &none
            >;
        };

        game {
            display-name = "game";
            bindings = <
&kp EQUAL  &alt_f1  &alt_f2  &alt_f3       &alt_f4        &alt_f5                                         &alt_f6        &alt_f7        &alt_f8           &alt_f9  &alt_f10  &kp MINUS
&kp GRAVE  &kp Q    &kp W    &kp F         &kp P          &kp B                                           &kp J          &kp L          &kp U             &kp Y    &kp APOS  &kp SEMI
&bspc_del  &kp A    &kp R    &kp S         &kp T          &kp G                                           &kp M          &kp N          &kp E             &kp I    &kp O     &none
&sl 3      &kp Z    &kp X    &kp C         &kp D          &kp V           &none            &none          &kp K          &kp H          &kp COMMA         &kp DOT  &kp FSLH  &sl 2
                             &mt LGUI RET  &mt LCTRL ESC  &mt LALT SPACE  &mt LSHFT TAB    &mt RSHFT RET  &mt RALT BSPC  &mt RCTRL DEL  &mt RGUI RA(TAB)
            >;
        };

        fun {
            display-name = "sym";
            bindings = <
&none  &none     &none     &none      &none      &none                                     &none   &none      &none      &none     &none     &none
&none  &none     &none     &none      &none      &none                                     &none   &none      &none      &none     &none     &none
&none  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &none                                     &none   &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &none
&none  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5  &kp F11          &kp F12          &kp F6  &kp F7     &kp F8     &kp F9    &kp F10   &none
                           &none      &none      &to 0   &kp LC(PSCRN)    &lt 2 LC(PSCRN)  &to 0   &none      &none
            >;

            label = "fun";
        };

        num {
            display-name = "num";
            bindings = <
&none  &none           &none   &none   &none   &none                                &none     &none      &none      &none      &none      &none
&none  &none           &kp N7  &kp N8  &kp N9  &kp LBKT                             &kp RBKT  &kp AMPS   &kp MINUS  &kp UNDER  &none      &none
&none  &mt EQUAL PLUS  &kp N4  &kp N5  &kp N6  &mt STAR FSLH                        &kp BSLH  &kp CARET  &kp PRCNT  &kp DLLR   &kp GRAVE  &none
&none  &kp N0          &kp N1  &kp N2  &kp N3  &kp LBRC       &kp LT      &kp GT    &kp RBRC  &kp PIPE   &kp AT     &kp HASH   &kp TILDE  &none
                               &none   &none   &to 0          &kp LPAR    &kp RPAR  &sl 4     &none      &none
            >;
        };

        nav {
            bindings = <
&none  &none     &none           &none           &none            &none                                   &none          &none      &none      &none      &none        &none
&none  &none     &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP                            &kp HOME       &kp PG_DN  &kp PG_UP  &kp END    &kp INS      &none
&none  &sk LALT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN                          &kp LEFT       &kp DOWN   &kp UP     &kp RIGHT  &cwh CAPS 0  &none
&none  &mkp MB4  &mkp MB5        &mkp MB3        &mkp MB1         &mkp MB2        &none        &none      &kp LS(LC(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)    &none
                                 &none           &none            &to 0           &sk LCTRL    &sk LSHFT  &kp LG(SPACE)  &none      &none
            >;

            label = "nav";
        };
    };
};
