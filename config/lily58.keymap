/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MEH LC(LS(LALT))

&lt {
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                                       6  7  8  9 10 11
                                      18 19 20 21 22 23
                                      30 31 32 33 34 35
                                      43 44 45 46 47 48 49
                        50 51 52 53    54 55 56 57
            >;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                 0  1  2  3  4  5
                12 13 14 15 16 17
                24 25 26 27 28 29
                36 37 38 39 40 41 42
                        50 51 52 53    54 55 56 57
            >;
            hold-trigger-on-release;
        };

        cln_semi: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cwt: caps_word_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        lbkt: ctrl_lbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        lprn: shift_lparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&lbkt>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbkt: ctrl_rbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        rprn: shift_rparen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_PARENTHESIS>, <&rbkt>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        alt_f1: alt_f1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp F1>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f2: alt_f2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f3: alt_f3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp F3>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f4: alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp F4>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f5: alt_f5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp F5>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f6: alt_f6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp F6>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f7: alt_f7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp F7>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f8: alt_f8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp F8>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f9: alt_f9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp F9>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_f10: alt_f10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&kp F10>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        c_to_base {
            bindings = <&to 0>;
            key-positions = <0 1>;
            layers = <1>;
        };

        c_to_game {
            bindings = <&to 1>;
            key-positions = <2 3>;
            layers = <0>;
        };

        c_bt_previous {
            bindings = <&bt BT_PRV>;
            key-positions = <6 7>;
        };

        c_bt_next {
            bindings = <&bt BT_NXT>;
            key-positions = <8 9>;
        };

        c_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <10 11>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <48 49>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&kp EQUAL  &alt_f1      &alt_f2      &alt_f3       &alt_f4       &alt_f5                            &alt_f6     &alt_f7       &alt_f8       &alt_f9      &alt_f10        &kp MINUS
&kp BSLH   &kp Q        &kp W        &kp F         &kp P         &kp B                              &kp J       &kp L         &kp U         &kp Y        &kp APOSTROPHE  &kp SEMI
&sk LCTRL  &hml LGUI A  &hml LALT R  &hml LCTRL S  &hml LSHFT T  &hml MEH G                         &hmr MEH M  &hmr RSHFT N  &hmr RCTRL E  &hmr RALT I  &hmr RGUI O     &sk RCTRL
&sk LSHFT  &kp Z        &kp X        &kp C         &kp D         &kp V        &lprn      &rprn      &kp K       &kp H         &kp COMMA     &kp DOT      &kp FSLH        &sk RSHFT
                                     &none         &kp ESCAPE    &lt 2 SPACE  &lt 3 TAB  &lt 3 RET  &lt 2 BSPC  &kp DELETE    &none
            >;
        };

        game {
            display-name = "game";
            bindings = <
&kp EQUAL  &alt_f1  &alt_f2  &alt_f3       &alt_f4        &alt_f5                                       &alt_f6        &alt_f7        &alt_f8           &alt_f9  &alt_f10  &kp MINUS
&kp GRAVE  &kp Q    &kp W    &kp F         &kp P          &kp B                                         &kp J          &kp L          &kp U             &kp Y    &kp APOS  &kp SEMI
&sl 2      &kp A    &kp R    &kp S         &kp T          &kp G                                         &kp M          &kp N          &kp E             &kp I    &kp O     &sl 2
&sl 3      &kp Z    &kp X    &kp C         &kp D          &kp V           &trans         &trans         &kp K          &kp H          &kp COMMA         &kp DOT  &kp FSLH  &sl 3
                             &mt LGUI RET  &mt LCTRL ESC  &mt LALT SPACE  &mt LSHFT TAB  &mt RSHFT RET  &mt RALT BSPC  &mt RCTRL DEL  &mt RGUI RA(TAB)
            >;
        };

        num {
            display-name = "num";
            bindings = <
&trans  &trans          &trans        &trans         &trans         &trans                                       &trans           &trans            &trans       &trans     &trans       &trans
&trans  &kp LBKT        &kp N7        &kp N8         &kp N9         &kp RBKT                                     &kp HOME         &kp PAGE_DOWN     &kp PAGE_UP  &kp END    &kp F12      &trans
&trans  &hml LGUI SEMI  &hml LALT N4  &hml LCTRL N5  &hml LSHFT N6  &hml MEH EQUAL                               &kp LEFT         &kp DOWN          &kp UP       &kp RIGHT  &cwt CAPS 0  &trans
&trans  &kp GRAVE       &kp N1        &kp N2         &kp N3         &kp BSLH        &trans     &trans            &kp LS(LC(Z))    &kp LC(V)         &kp LC(C)    &kp LC(X)  &kp LC(Z)    &trans
                                      &none          &kp DOT        &lt 2 N0        &kp MINUS  &mt RCTRL RG(UP)  &lt 2 RG(SPACE)  &mt RGUI RA(TAB)  &none
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
&trans  &trans           &trans           &trans            &trans             &trans                                       &trans               &trans             &trans        &trans           &trans         &trans
&trans  &kp LBRC         &kp AMPS         &kp STAR          &kp GRAVE          &kp RBRC                                     &msc SCRL_LEFT       &msc SCRL_DOWN     &msc SCRL_UP  &msc SCRL_RIGHT  &kp RG(PSCRN)  &trans
&trans  &hml LGUI COLON  &hmr LALT DLLR   &hml LCTRL PRCNT  &hml LSHFT CARET   &hml MEH PLUS                                &mmv MOVE_LEFT       &mmv MOVE_DOWN     &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp PSCRN      &trans
&trans  &kp TILDE        &kp EXCL         &kp AT            &kp HASH           &kp PIPE        &trans       &trans          &mkp MB1             &mkp MB2           &mkp MB3      &mkp MB4         &mkp MB5       &trans
                                          &none             &mt LALT LPAR      &mt LCTRL RPAR  &lt 3 UNDER  &lt 3 RG(LEFT)  &mt RCTRL RG(RIGHT)  &mt RALT RG(DOWN)  &none
            >;
        };
    };
};
