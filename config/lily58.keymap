/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#include "behaviors/alt_fn_morph.dtsi"

#define BASE 0
#define GAME 1
#define NAV  2
#define NUM  3
#define SYM  4
#define MSE  5
#define APP  6

#define XXX &none
#define ___ &trans

#define ALT_TAB &tt APP LA(TAB)
#define AS(keycode) &as LS(keycode) keycode

#define B_LT0 XXX
#define B_LT1 &kp ESC
#define B_LT2 &lt NAV SPACE
#define B_LT3 &mt LSHFT TAB
#define B_RT3 &lt SYM RET
#define B_RT2 &lt NUM BSPC
#define B_RT1 &kp DEL
#define B_RT0 XXX

#define B_ENC0 ALT_TAB
#define B_ENC1 &kp LG(SPACE)

#define B_SQT  &as DQT SQT
#define B_CMMA &as QMARK COMMA
#define B_DOT  &as EXCL DOT
#define B_COLN &as SEMI COLON

#define G_LT0 &mt LGUI RET      
#define G_LT1 &mt LCTL ESC
#define G_LT2 &mt LALT SPACE
#define G_LT3 &mt LSFT TAB      
#define G_RT3 &mt LSFT RET
#define G_RT2 &mt LALT BSPC
#define G_RT1 &mt LCTL DEL
#define G_RT0 &mt LGUI ESC

#define G_ENC0 ALT_TAB
#define G_ENC1 &kp LG(SPACE)

&lt {
    quick-tap-ms = <150>;
    bindings = <&sl>, <&kp>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

/ {
    behaviors {
        as: autoshift {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        cwh: caps_word_hold {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&caps_word>;
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
        };

        tt: to_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&to>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
        };

        wm: wndw_mgmt {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <13 25 26 27 28 31 32 33 34 45 52 53 54 55>;
            // 13 = Q
            // 25 26 27 28 = left-hand arrows
            // 31 32 33 34 = right-hand arrows
            // 45 = H
            // 52 53 = left-hand thumbs
            // 54 55 = right-hand thumbs
        };
    };

    combos {
        compatible = "zmk,combos";

        wm_combo {
            bindings = <&tt APP LA(TAB)>;
            key-positions = <15 16>;  // FP
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <26 27>; // RS
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <26 27 28>; // RST
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <27 28>;  // ST
        };

        spc {
            bindings = <&kp SPACE>;
            key-positions = <31 32>;  // NE
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <31 32 33>;  // NEI
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <32 33>;  // IO
        };

        to_mse {
            bindings = <&to MSE>;
            key-positions = <41 44>;  // VK
            layers = <0>;
        };

        to_base {
            bindings = <&to BASE>;
            key-positions = <42 43>;  // ENC1 ENC2
            layers = <1>;
        };

        to_game {
            bindings = <&to GAME>;
            key-positions = <43 42>;  // ENC1 ENC2
            layers = <0>;
        };

        bt_prv {
            bindings = <&bt BT_PRV>;
            key-positions = <56 55>;  // RT2 RT3
        };

        bt_nxt {
            bindings = <&bt BT_NXT>;
            key-positions = <56 57>;  // RT3 RT4
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <57 56 55>; // RT2 RT3 RT4
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
XXX  XXX    XXX    XXX    XXX    XXX                    XXX    XXX    XXX     XXX    XXX     XXX
XXX  AS(Q)  AS(W)  AS(F)  AS(P)  AS(B)                  AS(J)  AS(L)  AS(U)   AS(Y)  B_SQT   XXX
XXX  AS(A)  AS(R)  AS(S)  AS(T)  AS(G)                  AS(M)  AS(N)  AS(E)   AS(I)  AS(O)   XXX
XXX  AS(Z)  AS(X)  AS(C)  AS(D)  AS(V)  B_ENC0  B_ENC1  AS(K)  AS(H)  B_CMMA  B_DOT  B_COLN  XXX
                   B_LT0  B_LT1  B_LT2  B_LT3   B_RT3   B_RT2  B_RT1  B_RT0
            >;
        };

        game {
            display-name = "game";
            bindings = <
&kp EQUAL  &alt_f1  &alt_f2  &alt_f3  &alt_f4  &alt_f5                  &alt_f6  &alt_f7  &alt_f8    &alt_f9  &alt_f10  &kp MINUS
&kp GRAVE  &kp Q    &kp W    &kp F    &kp P    &kp B                    &kp J    &kp L    &kp U      &kp Y    &kp APOS  &kp SEMI
&sl SYM    &kp A    &kp R    &kp S    &kp T    &kp G                    &kp M    &kp N    &kp E      &kp I    &kp O     &sl SYM
&sl NUM    &kp Z    &kp X    &kp C    &kp D    &kp V    G_ENC0  G_ENC1  &kp K    &kp H    &kp COMMA  &kp DOT  &kp FSLH  &sl NUM
                    G_LT0    G_LT1    G_LT2    B_LT3    B_RT3   B_RT2   B_RT1    B_RT0
            >;
        };

        nav {
            display-name = "nav";
            bindings = <
___  ___            ___            ___            ___            ___                       ___            ___        ___        ___        ___          ___
___  &kp LG(PG_DN)  &kp LC(PG_DN)  &kp LC(PG_UP)  &kp LG(PG_UP)  &msc SCRL_UP              &kp HOME       &kp PG_DN  &kp PG_UP  &kp END    &to MSE      ___
___  &sk LGUI       &sk LALT       &sk LCTRL      &sk LSHFT      &msc SCRL_DOWN            &kp LEFT       &kp DOWN   &kp UP     &kp RIGHT  &kp LA(TAB)  ___
___  &kp LC(Z)      &kp LC(X)      &kp LC(C)      &kp LC(V)      &kp LC(LS(Z))   ___  ___  &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)    ___
                    ___            ___            ___            ___             ___  ___  ___            ___
            >;
        };

        num {
            display-name = "num";
            bindings = <
___  ___            ___      ___      ___      ___                  ___      ___        ___        ___       ___       ___
___  &as LBRC LBKT  &alt_f7  &alt_f8  &alt_f9  &as RBRC RBKT        &kp F10  &kp F11    &kp F12    &kp F13   &kp F14   ___
___  &kp PLUS       &alt_f4  &alt_f5  &alt_f6  &kp EQUAL            &kp F15  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  ___
___  &kp STAR       &alt_f1  &alt_f2  &alt_f3  &kp FSLH   ___  ___  &kp F16  &kp F17    &kp F18    &kp F19   &kp F20   ___
                    ___      &kp DOT  &kp N0   &kp MINUS  ___  ___  ___      ___
            >;
        };

        sym {
            display-name = "sym";
            bindings = <
___  ___            ___       ___        ___        ___                       ___          ___            ___            ___            ___            ___
___  &as LBKT LBRC  &kp AMPS  &kp LT     &kp GT     &as RBKT RBRC             &kp PSCRN    &kp LS(PSCRN)  &kp LC(PSCRN)  &kp LA(PSCRN)  &kp LG(PSCRN)  ___
___  &kp TILDE      &kp DLLR  &kp PRCNT  &kp CARET  &kp PIPE                  &cwh CAPS 0  &sk LSHFT      &sk LCTRL      &sk LALT       &sk LGUI       ___
___  &kp GRAVE      &kp EXCL  &kp AT     &kp HASH   &kp BSLH  ___        ___  XXX          XXX            XXX            XXX            XXX            ___
                              ___        &kp LPAR   &kp RPAR  &kp UNDER  ___  ___          ___            XXX
            >;
        };

        mse {
            display-name = "mse";
            bindings = <
___  ___            ___            ___            ___            ___                           ___             ___             ___           ___              ___            ___
___  &kp LG(PG_DN)  &kp LC(PG_DN)  &kp LC(PG_UP)  &kp LG(PG_UP)  &to 5                         &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_DOWN   XXX            ___
___  &sk LGUI       &sk LALT       &sk LCTRL      &sk LSHFT      &to 0                         &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp LA(SPACE)  ___
___  XXX            XXX            &mkp MB3       &mkp MB4       &mkp MB5  ___       ___       &kp LC(LS(Z))   &kp LC(V)       &kp LC(C)     &kp LC(X)        &kp LC(Z)      ___
                                   ___            XXX            &mkp MB1  &mkp MB2  &mkp MB2  &mkp MB1        XXX             ___
            >;
        };

        app {
            display-name = "app";
            bindings = <
___  ___       ___       ___     ___        ___                       ___      ___       ___       ___     ___        ___
___  ___       ___       ___     ___        ___                       ___      ___       ___       ___     ___        ___
___  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  ___                       ___      &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  ___
___  ___       ___       ___     ___        ___    ___   ___          ___      ___       ___       ___     ___        ___
               ___       &to 0   &kp TAB    &kp LS(TAB)  &kp LS(TAB)  &kp TAB  &to 0     ___
            >;
        };
    };
};
